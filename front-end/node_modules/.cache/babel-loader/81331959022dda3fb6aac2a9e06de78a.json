{"ast":null,"code":"var _jsxFileName = \"/home/gui/Documentos/Projetos/Desafios_Tecnicos/desafio-ebytr/front-end/src/context/DataProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport jwtDecode from 'jwt-decode';\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport DataContext from './DataContext';\nimport isAuthenticated from '../auth/isAuthenticated';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DataProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [links, setLinks] = useState([{\n    url: '',\n    name: 'Login'\n  }]);\n  const [userTasks, setUserTasks] = useState([{\n    taskDescription: '',\n    taskStatus: ''\n  }]);\n  const [climates, setClimates] = useState([{\n    climateId: 1,\n    climateHour: 0,\n    climateRain: 0,\n    dateId: 0\n  }]);\n  useEffect(() => {\n    if (isAuthenticated()) {\n      setLinks([{\n        url: 'minhas-tarefas',\n        name: 'Minhas Tarefas'\n      }]);\n    }\n  }, []);\n  useEffect(() => {\n    if (isAuthenticated()) {\n      const token = localStorage.getItem('token');\n      const {\n        data: {\n          userId\n        }\n      } = jwtDecode(token);\n      console.log(userId);\n      console.log(setUserTasks);\n    }\n  }, [links]);\n  const contextValue = {\n    links,\n    setLinks,\n    userTasks,\n    climates,\n    setClimates\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DataProvider, \"vl+G4FVexbAl4mYo3T/ZslinVP8=\");\n\n_c = DataProvider;\nDataProvider.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired\n};\nexport default DataProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"sources":["/home/gui/Documentos/Projetos/Desafios_Tecnicos/desafio-ebytr/front-end/src/context/DataProvider.jsx"],"names":["jwtDecode","React","useState","useEffect","PropTypes","DataContext","isAuthenticated","DataProvider","children","links","setLinks","url","name","userTasks","setUserTasks","taskDescription","taskStatus","climates","setClimates","climateId","climateHour","climateRain","dateId","token","localStorage","getItem","data","userId","console","log","contextValue","propTypes","oneOfType","arrayOf","node","isRequired"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,eAAP,MAA4B,yBAA5B;;;AAEA,SAASC,YAAT,OAAoC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAClC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CACjC;AAAES,IAAAA,GAAG,EAAE,EAAP;AAAWC,IAAAA,IAAI,EAAE;AAAjB,GADiC,CAAD,CAAlC;AAGA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,CACzC;AAAEa,IAAAA,eAAe,EAAE,EAAnB;AAAuBC,IAAAA,UAAU,EAAE;AAAnC,GADyC,CAAD,CAA1C;AAGA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,CAAC;AACxCiB,IAAAA,SAAS,EAAE,CAD6B;AAC1BC,IAAAA,WAAW,EAAE,CADa;AACVC,IAAAA,WAAW,EAAE,CADH;AACMC,IAAAA,MAAM,EAAE;AADd,GAAD,CAAD,CAAxC;AAIAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIG,eAAe,EAAnB,EAAuB;AACrBI,MAAAA,QAAQ,CAAC,CACP;AAAEC,QAAAA,GAAG,EAAE,gBAAP;AAAyBC,QAAAA,IAAI,EAAE;AAA/B,OADO,CAAD,CAAR;AAGD;AACF,GANQ,EAMN,EANM,CAAT;AAQAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIG,eAAe,EAAnB,EAAuB;AACrB,YAAMiB,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,YAAM;AAAEC,QAAAA,IAAI,EAAE;AAAEC,UAAAA;AAAF;AAAR,UAAuB3B,SAAS,CAACuB,KAAD,CAAtC;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYf,YAAZ;AACD;AACF,GAPQ,EAON,CAACL,KAAD,CAPM,CAAT;AASA,QAAMqB,YAAY,GAAG;AACnBrB,IAAAA,KADmB;AAEnBC,IAAAA,QAFmB;AAGnBG,IAAAA,SAHmB;AAInBI,IAAAA,QAJmB;AAKnBC,IAAAA;AALmB,GAArB;AAQA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEY,YAA7B;AAAA,cACGtB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAzCQD,Y;;KAAAA,Y;AA2CTA,YAAY,CAACwB,SAAb,GAAyB;AACvBvB,EAAAA,QAAQ,EAAEJ,SAAS,CAAC4B,SAAV,CAAoB,CAC5B5B,SAAS,CAAC6B,OAAV,CAAkB7B,SAAS,CAAC8B,IAA5B,CAD4B,EAE5B9B,SAAS,CAAC8B,IAFkB,CAApB,EAGPC;AAJoB,CAAzB;AAOA,eAAe5B,YAAf","sourcesContent":["import jwtDecode from 'jwt-decode';\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport DataContext from './DataContext';\nimport isAuthenticated from '../auth/isAuthenticated';\n\nfunction DataProvider({ children }) {\n  const [links, setLinks] = useState([\n    { url: '', name: 'Login' },\n  ]);\n  const [userTasks, setUserTasks] = useState([\n    { taskDescription: '', taskStatus: '' },\n  ]);\n  const [climates, setClimates] = useState([{\n    climateId: 1, climateHour: 0, climateRain: 0, dateId: 0,\n  }]);\n\n  useEffect(() => {\n    if (isAuthenticated()) {\n      setLinks([\n        { url: 'minhas-tarefas', name: 'Minhas Tarefas' },\n      ]);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isAuthenticated()) {\n      const token = localStorage.getItem('token');\n      const { data: { userId } } = jwtDecode(token);\n      console.log(userId);\n      console.log(setUserTasks);\n    }\n  }, [links]);\n\n  const contextValue = {\n    links,\n    setLinks,\n    userTasks,\n    climates,\n    setClimates,\n  };\n\n  return (\n    <DataContext.Provider value={contextValue}>\n      {children}\n    </DataContext.Provider>\n  );\n}\n\nDataProvider.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n\nexport default DataProvider;\n"]},"metadata":{},"sourceType":"module"}